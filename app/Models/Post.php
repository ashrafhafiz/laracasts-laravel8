<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
    use HasFactory;

    // protected $with = ['category', 'user'];

    public $fillable = [
        'title',
        'slug',
        'excerpt',
        'body',
        'category_id'
    ];

    // public $guarded = [];


    //to change the default route-model binding key
    //public function getRouteKeyName()
    //{
    // // return parent::getRouteKeyName(); // TODO: Change the autogenerated stub
    // return 'slug';
    //}

    // simple query scope
    //    public function scopeFilter($query) {
    //        if (request('search')) {
    //            $query
    //                ->where('title', 'like', '%' . request('search') . '%')
    //                ->orWhere('body', 'like', '%' . request('search') . '%');
    //        }
    //    }


    // will be rewritten in more professional way
    //    public function scopeFilter($query, array $filters) {
    //        if (isset($filters['search'])) {
    //            $query
    //                ->where('title', 'like', '%' . request('search') . '%')
    //                ->orWhere('body', 'like', '%' . request('search') . '%');
    //        }
    //    }


    public function scopeFilter($query, array $filters)
    {
        // SELECT * FROM `posts`
        //      WHERE (`title` like '%search%' or `body` like '%search%')
        //      ORDER BY `created_at` DESC
        $query->when($filters['search'] ?? false, fn($query, $search) =>

        // Fixing a bug
        //
        // $query
        //      ->where('title', 'like', '%' . $search . '%')
        //      ->orWhere('body', 'like', '%' . $search . '%')
            $query->where(
                fn($query) => $query
                    ->where('title', 'like', '%' . $search . '%')
                    ->orWhere('body', 'like', '%' . $search . '%')
            )
            );

        //        // SELECT * FROM `posts`
        //        // WHERE EXISTS (SELECT * FROM `categories`
        //        //                  WHERE `categories`.`id` = `posts`.`category_id`
        //        //                  and `categories`.`slug` = 'work')
        //        //              ORDER BY `created_at` DESC
        //        $query->when($filters['category'] ?? false, fn($query, $category) =>
        //            $query
        //                ->whereExists(fn($query) =>
        //                    $query->from('categories')
        //                        ->whereColumn('categories.id', 'posts.category_id')
        //                        ->where('categories.slug', $category))
        //
        //        );

        $query->when($filters['category'] ?? false, fn($query, $category)=>
            $query->whereHas('category',
                fn($query) => $query->where('slug', $category)
            )
        );

        $query->when($filters['user'] ?? false, fn($query, $user)=>
        $query->whereHas('user',
            fn($query) => $query->where('username', $user)
        )
        );
    }


    public function category()
    {
        return $this->belongsTo(Category::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }
}
